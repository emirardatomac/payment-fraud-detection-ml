{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3478314,"sourceType":"datasetVersion","datasetId":2093649}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Gerekli kütüphaneleri yüklüyoruz\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom scipy.sparse import hstack, csr_matrix\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import DBSCAN","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-19T17:28:41.479929Z","iopub.execute_input":"2024-09-19T17:28:41.480336Z","iopub.status.idle":"2024-09-19T17:28:41.486883Z","shell.execute_reply.started":"2024-09-19T17:28:41.480297Z","shell.execute_reply":"2024-09-19T17:28:41.485851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Veriyi yüklüyoruz\ndf = pd.read_csv('/kaggle/input/online-payments-fraud-detection-dataset/PS_20174392719_1491204439457_log.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:10:25.426813Z","iopub.execute_input":"2024-09-19T17:10:25.427670Z","iopub.status.idle":"2024-09-19T17:10:42.855601Z","shell.execute_reply.started":"2024-09-19T17:10:25.427624Z","shell.execute_reply":"2024-09-19T17:10:42.854759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Veriyi rastgele 10,000 örnekle sınırlıyoruz\ndf_sample = df.sample(n=10000, random_state=42)\n\n# Hedef değişkenin dağılımını görselleştiriyoruz\nplt.figure(figsize=(6, 4))\nsns.countplot(data=df_sample, x='isFraud')\nplt.title('Fraud ve Non-Fraud Dağılımı')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:10:53.738468Z","iopub.execute_input":"2024-09-19T17:10:53.738951Z","iopub.status.idle":"2024-09-19T17:10:54.202303Z","shell.execute_reply.started":"2024-09-19T17:10:53.738905Z","shell.execute_reply":"2024-09-19T17:10:54.201207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Sayısal verilerin dağılımını incelemek için histogram çiziyoruz\ndf_sample[['oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']].hist(figsize=(10, 8))\nplt.suptitle('Sayısal Verilerin Dağılımı')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:31:31.848771Z","iopub.execute_input":"2024-09-19T17:31:31.849160Z","iopub.status.idle":"2024-09-19T17:31:32.674979Z","shell.execute_reply.started":"2024-09-19T17:31:31.849121Z","shell.execute_reply":"2024-09-19T17:31:32.674015Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Kategorik sütunları belirliyoruz\ncategorical_columns = ['type', 'nameOrig', 'nameDest']\nX_categorical = df_sample[categorical_columns]\nX_numeric = df_sample.drop(columns=categorical_columns + ['isFraud'])\n\n# Kategorik verileri OneHotEncoder ile dönüştürüyoruz\nencoder = OneHotEncoder(sparse_output=False)\nX_categorical_encoded = encoder.fit_transform(X_categorical)\n\n# Sayısal verileri numpy array'e dönüştürüyoruz\nX_numeric = X_numeric.values\nX_numeric_sparse = csr_matrix(X_numeric)\n\n# Kategorik ve sayısal verileri birleştiriyoruz\nX_combined = hstack([X_numeric_sparse, X_categorical_encoded])\n\n# Eğitim ve test setlerine bölüyoruz\nX_train, X_test, y_train, y_test = train_test_split(X_combined, df_sample['isFraud'], test_size=0.2, random_state=42)\n\n# SMOTE ile eğitim verisini dengeye getiriyoruz\nsmote = SMOTE(random_state=42)\nX_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:11:01.748131Z","iopub.execute_input":"2024-09-19T17:11:01.749064Z","iopub.status.idle":"2024-09-19T17:11:03.689305Z","shell.execute_reply.started":"2024-09-19T17:11:01.749019Z","shell.execute_reply":"2024-09-19T17:11:03.688506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Özellik Mühendisliği\nVerinin daha iyi anlaşılması ve model performansının artırılması için bazı özellikler yeniden yapılandırıldı ve yeni özellikler türetildi.\n","metadata":{}},{"cell_type":"markdown","source":"### SMOTE Kullanımı\nVeri setindeki sınıf dengesizliğini düzeltmek için SMOTE kullanıldı. Azınlık sınıfındaki örnekleri artırarak modelin bu sınıfı daha iyi öğrenmesi hedeflenmiştir. Bu sayede, dengesiz veri setlerinden kaynaklanan sorunlar en aza indirilmiştir.\n","metadata":{}},{"cell_type":"markdown","source":"### Veri Dengesizliği ile Mücadele\nFraud olan veriler, veri setinde nispeten daha az sayıda olduğu için SMOTE yöntemi kullanılarak bu dengesizlik giderilmeye çalışıldı. Bu sayede azınlık sınıfındaki örnekler artırılarak modelin bu sınıfı daha iyi öğrenmesi sağlandı.\n","metadata":{}},{"cell_type":"markdown","source":"---------------------------------","metadata":{}},{"cell_type":"markdown","source":"### Gözetimli Öğrenme","metadata":{}},{"cell_type":"code","source":"# ---------------- Gözetimli Öğrenme ---------------- #\n\n# Lojistik Regresyon Modeli\nparam_grid_lr = {\n    'C': [0.01, 0.1, 1, 10, 100],\n    'solver': ['liblinear', 'lbfgs']\n}\nrandom_search_lr = RandomizedSearchCV(LogisticRegression(max_iter=1000), param_grid_lr, n_iter=10, cv=3, n_jobs=-1, scoring='accuracy', random_state=42)\nrandom_search_lr.fit(X_train_smote, y_train_smote)\nbest_lr = random_search_lr.best_estimator_\n\n# En iyi Lojistik Regresyon modelini kullanarak çapraz doğrulama\ncv_scores_lr = cross_val_score(best_lr, X_train_smote, y_train_smote, cv=3, scoring='accuracy')\nprint(f\"Lojistik Regresyon Çapraz Doğrulama Ortalama Doğruluk Skoru: {cv_scores_lr.mean()}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:11:11.994418Z","iopub.execute_input":"2024-09-19T17:11:11.994812Z","iopub.status.idle":"2024-09-19T17:11:16.527898Z","shell.execute_reply.started":"2024-09-19T17:11:11.994775Z","shell.execute_reply":"2024-09-19T17:11:16.526962Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Random Forest Modeli\nparam_grid_rf = {\n    'n_estimators': [100, 200],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2, 5, 10]\n}\nrandom_search_rf = RandomizedSearchCV(RandomForestClassifier(), param_grid_rf, n_iter=10, cv=3, n_jobs=-1, scoring='accuracy', random_state=42)\nrandom_search_rf.fit(X_train_smote, y_train_smote)\nbest_rf = random_search_rf.best_estimator_\n\n# En iyi Random Forest modelini kullanarak çapraz doğrulama\ncv_scores_rf = cross_val_score(best_rf, X_train_smote, y_train_smote, cv=3, scoring='accuracy')\nprint(f\"Random Forest Çapraz Doğrulama Ortalama Doğruluk Skoru: {cv_scores_rf.mean()}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:11:26.978106Z","iopub.execute_input":"2024-09-19T17:11:26.978877Z","iopub.status.idle":"2024-09-19T17:12:53.360612Z","shell.execute_reply.started":"2024-09-19T17:11:26.978834Z","shell.execute_reply":"2024-09-19T17:12:53.359699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Seçimi\nLogistic Regression ve Random Forest modelleri kullanıldı. Logistic Regression, basit ve yorumlanabilir yapısı nedeniyle tercih edilirken, Random Forest daha karmaşık veri ilişkilerini öğrenmek için kullanılmıştır.\n","metadata":{}},{"cell_type":"markdown","source":"-----------------------","metadata":{}},{"cell_type":"markdown","source":"### Gözetimsiz Öğrenme","metadata":{}},{"cell_type":"code","source":"# ---------------- Gözetimsiz Öğrenme ---------------- #\n\n# K-Means Kümeleme Modeli\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_combined.toarray())\n\n\nkmeans = KMeans(n_clusters=2, random_state=42, n_init=10)\nkmeans.fit(X_scaled)\ny_kmeans = kmeans.labels_\n\n# K-Means için PCA ile boyut indirgeme\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_scaled)\n\n# K-Means Kümelerinin Görselleştirilmesi\nplt.figure(figsize=(8, 6))\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_kmeans, cmap='viridis', marker='o', s=50)\nplt.title(\"K-Means Kümeleme Sonucu (PCA ile 2D)\")\nplt.xlabel(\"1. Ana Bileşen\")\nplt.ylabel(\"2. Ana Bileşen\")\nplt.colorbar(label='Küme')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:30:30.595601Z","iopub.execute_input":"2024-09-19T17:30:30.596244Z","iopub.status.idle":"2024-09-19T17:30:54.028383Z","shell.execute_reply.started":"2024-09-19T17:30:30.596202Z","shell.execute_reply":"2024-09-19T17:30:54.027482Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# DBSCAN Kümeleme Modeli\ndbscan = DBSCAN(eps=0.5, min_samples=5)\ny_dbscan = dbscan.fit_predict(X_scaled)\n\n\n# K-Means ve DBSCAN performanslarını karşılaştırma\n# K-Means için Karışıklık Matrisi\ncm_kmeans = confusion_matrix(df_sample['isFraud'], y_kmeans)\nprint(\"K-Means Karışıklık Matrisi:\\n\", cm_kmeans)\n\n# DBSCAN için Karışıklık Matrisi\ncm_dbscan = confusion_matrix(df_sample['isFraud'], y_dbscan)\nprint(\"DBSCAN Karışıklık Matrisi:\\n\", cm_dbscan)\n\n# Grafiklerle gösterim\nplt.figure(figsize=(12, 5))\n\n# K-Means Karışıklık Matrisi\nplt.subplot(1, 2, 1)\nsns.heatmap(cm_kmeans, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.title('K-Means Karışıklık Matrisi')\nplt.xlabel('Tahmin Edilen')\nplt.ylabel('Gerçek')\n\n# DBSCAN Karışıklık Matrisi\nplt.subplot(1, 2, 2)\nsns.heatmap(cm_dbscan, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.title('DBSCAN Karışıklık Matrisi')\nplt.xlabel('Tahmin Edilen')\nplt.ylabel('Gerçek')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:27:04.077957Z","iopub.execute_input":"2024-09-19T17:27:04.078492Z","iopub.status.idle":"2024-09-19T17:27:49.581365Z","shell.execute_reply.started":"2024-09-19T17:27:04.078433Z","shell.execute_reply":"2024-09-19T17:27:49.580460Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### En iyi gözetimli öğrenme modeli ile en iyi gözetimsiz öğrenme modeli karşılaştırması","metadata":{}},{"cell_type":"code","source":"\nbest_supervised_model = best_rf if cv_scores_rf.mean() > cv_scores_lr.mean() else best_lr\nbest_unsupervised_model = \"K-Means\" if cm_kmeans[1, 1] > cm_dbscan[1, 1] else \"DBSCAN\"\nprint(f\"En iyi gözetimli öğrenme modeli: {best_supervised_model}\")\nprint(f\"En iyi gözetimsiz öğrenme modeli: {best_unsupervised_model}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:18:15.915672Z","iopub.execute_input":"2024-09-19T17:18:15.916558Z","iopub.status.idle":"2024-09-19T17:18:15.924782Z","shell.execute_reply.started":"2024-09-19T17:18:15.916518Z","shell.execute_reply":"2024-09-19T17:18:15.923938Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"code","source":"# Performans metrikleri\naccuracy_kmeans = accuracy_score(df_sample['isFraud'], y_kmeans)\nprint(f\"K-Means Doğruluk Skoru: {accuracy_kmeans}\")\n\n# En iyi gözetimli öğrenme modeli ile gözetimsiz öğrenme modeli karşılaştırması\n# Performansları karşılaştırmak için uygun metrikler kullanılır\nbest_supervised_model = best_rf\naccuracy_rf = cv_scores_rf.mean()\nprint(f\"Random Forest En İyi Model Doğruluk Skoru: {accuracy_rf}\")\n\n# Gözetimsiz öğrenme sonuçları\nprint(f\"K-Means En İyi Model Doğruluk Skoru: {accuracy_kmeans}\")\n\n# Grafiklerle gösterim\nplt.figure(figsize=(12, 5))\n\n# K-Means Karışıklık Matrisi\nplt.subplot(1, 2, 1)\nsns.heatmap(cm_kmeans, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.title('K-Means Karışıklık Matrisi')\nplt.xlabel('Tahmin Edilen')\nplt.ylabel('Gerçek')\n\nplt.tight_layout()\nplt.show()\n\n# Karşılaştırma Tablosu\nprint(\"\\nPerformans Karşılaştırması:\")\nprint(f\"Random Forest Doğruluk Skoru: {accuracy_rf}\")\nprint(f\"K-Means Doğruluk Skoru: {accuracy_kmeans}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:20:28.770684Z","iopub.execute_input":"2024-09-19T17:20:28.771050Z","iopub.status.idle":"2024-09-19T17:20:28.986773Z","shell.execute_reply.started":"2024-09-19T17:20:28.771015Z","shell.execute_reply":"2024-09-19T17:20:28.985316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"------","metadata":{}},{"cell_type":"markdown","source":"### Sonuç\nBu projede, online ödeme dolandırıcılığını tespit etmek için Gözetimli öğrenme kapsamında Logistic Regression,Random Forest modelleri;Gözetimsiz öğrenme kapsamında ise K-means ve DBSCAN modelleri kullanıldı. Veri setindeki dengesizlik nedeniyle SMOTE uygulanarak azınlık sınıfındaki veriler dengelendi. Modellerin performansı karşılaştırıldığında, **Random Forest** modelinin dolandırıcılık tespitinde daha yüksek doğruluk ve F1 skoru sunduğu gözlemlendi. Logistic Regression ise daha basit ve yorumlanabilir olmasına rağmen, Random Forest modelinin derin öğrenme kapasitesi dolandırıcılığı daha etkin şekilde tespit etti.\n","metadata":{}}]}